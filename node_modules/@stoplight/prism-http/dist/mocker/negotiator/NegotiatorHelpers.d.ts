import { IHttpOperation, IHttpOperationResponse, IMediaTypeContent } from '@stoplight/types';
import * as Either from 'fp-ts/lib/Either';
import { NonEmptyArray } from 'fp-ts/lib/NonEmptyArray';
import * as Option from 'fp-ts/lib/Option';
import * as Reader from 'fp-ts/lib/Reader';
import * as ReaderEither from 'fp-ts/lib/ReaderEither';
import { Logger } from 'pino';
import { IHttpNegotiationResult, NegotiatePartialOptions } from './types';
declare const helpers: {
    negotiateByPartialOptionsAndHttpContent({ code, exampleKey, dynamic }: NegotiatePartialOptions, httpContent: IMediaTypeContent): Either.Either<Error, Pick<IHttpNegotiationResult, "code" | "mediaType" | "bodyExample" | "schema">>;
    negotiateDefaultMediaType(partialOptions: NegotiatePartialOptions, response: IHttpOperationResponse): Either.Either<Error, IHttpNegotiationResult>;
    negotiateOptionsBySpecificResponse(_httpOperation: IHttpOperation, desiredOptions: import("../..").IHttpOperationConfig, response: IHttpOperationResponse): ReaderEither.ReaderEither<Logger, Error, IHttpNegotiationResult>;
    negotiateOptionsForDefaultCode(httpOperation: IHttpOperation, desiredOptions: import("../..").IHttpOperationConfig): ReaderEither.ReaderEither<Logger, Error, IHttpNegotiationResult>;
    negotiateOptionsBySpecificCode(httpOperation: IHttpOperation, desiredOptions: import("../..").IHttpOperationConfig, code: string): ReaderEither.ReaderEither<Logger, Error, IHttpNegotiationResult>;
    negotiateOptionsForValidRequest(httpOperation: IHttpOperation, desiredOptions: import("../..").IHttpOperationConfig): ReaderEither.ReaderEither<Logger, Error, IHttpNegotiationResult>;
    findResponse(httpResponses: IHttpOperationResponse[], statusCodes: NonEmptyArray<string>): Reader.Reader<Logger, Option.Option<IHttpOperationResponse>>;
    negotiateOptionsForInvalidRequest(httpResponses: IHttpOperationResponse[], statusCodes: NonEmptyArray<string>): ReaderEither.ReaderEither<Logger, Error, IHttpNegotiationResult>;
};
export default helpers;
