"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Option = require("fp-ts/lib/Option");
const Array_1 = require("fp-ts/lib/Array");
const pipeable_1 = require("fp-ts/lib/pipeable");
const lodash_1 = require("lodash");
const json_1 = require("@stoplight/json");
function resolveRuntimeExpressions(input, request, response) {
    return input.replace(/{(.+?)}/g, (_, expr) => pipeable_1.pipe(resolveRuntimeExpression(expr, request, response), Option.getOrElse(() => '')));
}
exports.resolveRuntimeExpressions = resolveRuntimeExpressions;
function resolveRuntimeExpression(expr, request, response) {
    const parts = expr.split(/[.#]/);
    return pipeable_1.pipe(tryMethod(), Option.alt(tryStatusCode), Option.alt(() => pipeable_1.pipe(isPart(0, '$request'), Option.chain(() => pipeable_1.pipe(tryRequestHeader(), Option.alt(tryRequestQuery), Option.alt(tryRequestBody))))), Option.alt(() => pipeable_1.pipe(isPart(0, '$response'), Option.chain(() => pipeable_1.pipe(tryResponseHeader(), Option.alt(tryResponseBody))))));
    function isPart(idx, type) {
        return pipeable_1.pipe(Array_1.lookup(idx, parts), Option.chain(part => pipeable_1.pipe(part, Option.fromPredicate(part => part === type))));
    }
    function tryMethod() {
        return pipeable_1.pipe(isPart(0, '$method'), Option.map(() => String(request.method)));
    }
    function tryStatusCode() {
        return pipeable_1.pipe(isPart(0, '$statusCode'), Option.map(() => String(response.statusCode)));
    }
    function tryRequestHeader() {
        return pipeable_1.pipe(isPart(1, 'header'), Option.chain(() => Array_1.lookup(2, parts)), Option.chain(part => pipeable_1.pipe(Option.fromNullable(request.headers), Option.mapNullable(headers => headers[part]))));
    }
    function tryRequestQuery() {
        return pipeable_1.pipe(isPart(1, 'query'), Option.chain(() => Array_1.lookup(2, parts)), Option.chain(part => pipeable_1.pipe(Option.fromNullable(request.url.query), Option.mapNullable(query => query[part]))));
    }
    function tryRequestBody() {
        return pipeable_1.pipe(isPart(1, 'body'), Option.chain(() => readBody(request.body)));
    }
    function tryResponseHeader() {
        return pipeable_1.pipe(isPart(1, 'header'), Option.chain(() => Array_1.lookup(2, parts)), Option.chain(part => pipeable_1.pipe(Option.fromNullable(response.headers), Option.mapNullable(headers => headers[part]))));
    }
    function tryResponseBody() {
        return pipeable_1.pipe(isPart(1, 'body'), Option.chain(() => readBody(response.body)));
    }
    function readBody(body) {
        return pipeable_1.pipe(Option.fromNullable(body), Option.chain(body => pipeable_1.pipe(Array_1.lookup(2, parts), Option.chain(part => Option.tryCatch(() => json_1.pointerToPath('#' + part))), Option.chain(path => Option.fromNullable(lodash_1.get(body, path))))));
    }
}
exports.resolveRuntimeExpression = resolveRuntimeExpression;
