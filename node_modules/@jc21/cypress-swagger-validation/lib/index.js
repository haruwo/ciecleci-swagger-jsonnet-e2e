"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Parser = require("json-schema-ref-parser");
const JsonPath = require("jsonpath");
const logger_1 = require("./logger");
const defaultLog = new logger_1.default('cypress-swagger-validation');
function SwaggerValidation(config) {
    let swaggerSchema;
    defaultLog.success('Plugin Loaded');
    const getSwaggerSchema = (configuration, file) => __awaiter(this, void 0, void 0, function* () {
        if (!swaggerSchema) {
            if (typeof configuration.env !== 'undefined' && typeof configuration.env.swaggerFile !== 'undefined') {
                file = configuration.env.swaggerFile;
            }
            if (!file) {
                throw new Error('Swagger file was not specified (swaggerFile)');
            }
            else {
                swaggerSchema = yield Parser.dereference(file);
            }
        }
        return swaggerSchema;
    });
    return {
        /**
         * @param   {object}        options
         * @param   {string}        options.endpoint
         * @param   {string}        options.method
         * @param   {number}        options.statusCode
         * @param   {object}        options.responseSchema
         * @param   {boolean}       options.verbose
         * @returns {string|null}   Errors or null if OK
         */
        validateSwaggerSchema: (options) => __awaiter(this, void 0, void 0, function* () {
            const log = new logger_1.default('validateSwaggerSchema');
            if (!options.endpoint) {
                return new Error('Endpoint was not specified (endpoint)');
            }
            if (!options.method) {
                return new Error('Method was not specified (method)');
            }
            if (!options.statusCode) {
                return new Error('Status Code was not specified (statusCode)');
            }
            if (!options.responseSchema) {
                return new Error('Response Schema was not specified (responseSchema)');
            }
            const verbose = options.verbose || false;
            const schema = yield getSwaggerSchema(config, options.file || null);
            const ref = '$.paths[\'' + options.endpoint + '\'].' + options.method + '.responses.' + options.statusCode + '.content[\'application/json\'].schema';
            let endpoint = JsonPath.query(schema, ref);
            if (!endpoint || !endpoint.length) {
                return new Error('Could not find Swagger Schema with: ' + ref);
            }
            // The endpoint var should be an array of found items with only 1 item ideally.
            endpoint = endpoint.shift();
            // Now validate the endpoint schema against the response
            const Ajv = require('ajv')({
                allErrors: true,
                format: 'full',
                nullable: true,
                verbose: true,
            });
            if (verbose) {
                log.debug('Endpoint:', options.endpoint);
                log.debug('Response Schema:', options.responseSchema);
            }
            const valid = Ajv.validate(endpoint, options.responseSchema);
            if (valid && !Ajv.errors) {
                if (verbose) {
                    log.success('Validation Success');
                }
                return null;
            }
            else {
                log.error(Ajv.errorsText());
                return Ajv.errorsText();
            }
        })
    };
}
exports.SwaggerValidation = SwaggerValidation;
//# sourceMappingURL=index.js.map