"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
test('test JSON swagger doc', () => __awaiter(void 0, void 0, void 0, function* () {
    const sv = index_1.SwaggerValidation({
        env: {
            swaggerFile: './testing/swagger.json'
        }
    });
    const result = yield sv.validateSwaggerSchema({
        endpoint: '/healthz',
        method: 'get',
        responseSchema: {
            result: {
                checks: {
                    databases: {
                        healthy: true
                    }
                },
                commit: '88cb49b8f8d4d9ce7c48',
                healthy: true
            }
        },
        statusCode: 200,
        verbose: true,
    });
    expect(result).toBe(null);
}));
test('test YML swagger doc', () => __awaiter(void 0, void 0, void 0, function* () {
    const sv = index_1.SwaggerValidation({
        env: {
            swaggerFile: './testing/swagger.yml'
        }
    });
    const result = yield sv.validateSwaggerSchema({
        endpoint: '/healthz',
        method: 'get',
        responseSchema: {
            result: {
                checks: {
                    databases: {
                        healthy: true
                    }
                },
                commit: '88cb49b8f8d4d9ce7c48',
                healthy: true
            }
        },
        statusCode: 200,
        verbose: true,
    });
    expect(result).toBeNull();
}));
test('test JSON swagger doc Invalid', () => __awaiter(void 0, void 0, void 0, function* () {
    const sv = index_1.SwaggerValidation({
        env: {
            swaggerFile: './testing/swagger.json'
        }
    });
    const result = yield sv.validateSwaggerSchema({
        endpoint: '/healthz',
        method: 'get',
        responseSchema: {
            result: {
                checks: {
                    databases: {
                        healthy: true
                    }
                },
                healthy: true
            }
        },
        statusCode: 200,
        verbose: true,
    });
    expect(typeof result).toBe('string');
    expect(result).toBe('data.result should have required property \'commit\'');
}));
test('test YML swagger doc Invalid', () => __awaiter(void 0, void 0, void 0, function* () {
    const sv = index_1.SwaggerValidation({
        env: {
            swaggerFile: './testing/swagger.yml'
        }
    });
    const result = yield sv.validateSwaggerSchema({
        endpoint: '/healthz',
        method: 'get',
        responseSchema: {
            result: {
                abc: 123,
                checks: {
                    databases: {
                        healthy: true
                    }
                },
                commit: '88cb49b8f8d4d9ce7c48',
                healthy: true
            }
        },
        statusCode: 200,
        verbose: true,
    });
    expect(typeof result).toBe('string');
    expect(result).toBe('data.result should NOT have additional properties');
}));
//# sourceMappingURL=index.test.js.map